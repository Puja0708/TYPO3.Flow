<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>JavaScript Coding Guidelines</title>

  <para>Here, you will find an explanation of the JavaScript Coding Guidelines
  we use. Generally, we strive to follow the FLOW3 Coding Guidelines as
  closely as possible, with exceptions which make sense in the JavaScript
  context.</para>

  <para>This guideline explains mostly how we want JavaScript code to be
  formatted; and it does <emphasis>not</emphasis> deal with the TYPO3 Phoenix
  User Interface structure. If you want to know more about the TYPO3 Phoenix
  User Interface architecture, have a look into the "Phoenix User Interface
  Development" book.</para>

  <section>
    <title>Naming Conventions</title>

    <itemizedlist>
      <listitem>
        <para>one class per file, with the same naming convention as
        FLOW3.</para>

        <para>This means all classes are built like this:
        <code>F3.<replaceable>PackageKey</replaceable>.<replaceable>SubNamespace</replaceable>.<replaceable>ClassName</replaceable></code>,
        and this class is implemented in a JavaScript file located at
        <filename><replaceable>...
        Package</replaceable>/.../JavaScript/<replaceable>SubNamespace</replaceable>/<replaceable>ClassName</replaceable>.js</filename>.</para>

        <para>Right now, the base directory for JavaScript in FLOW3 packages
        <filename>Resources/Public/JavaScript</filename>, but this might still
        change.</para>

        <note>
          <para>In TYPO3 v4, the prefix is <code>TYPO3</code>. This means an
          extension should use <code>TYPO3.ExtensionKey</code> as base
          namespace, while the TYPO3 Core should use
          <code>TYPO3.Backend</code> as namespace.</para>
        </note>
      </listitem>

      <listitem>
        <para>We suggest that the base directory for JavaScript files is
        <filename>JavaScript</filename>.</para>
      </listitem>

      <listitem>
        <para>Files have to be encoded in UTF-8.</para>
      </listitem>

      <listitem>
        <para>Classes and namespaces are written in
        <code>UpperCamelCase</code>, while properties and methods are written
        in <code>lowerCamelCase</code>.</para>
      </listitem>

      <listitem>
        <para>The xtype of a class is always the fully qualified class name.
        Every class which can be instanciated needs to have an xtype
        declaration.</para>
      </listitem>

      <listitem>
        <para>Never create a class which has classes inside itself. Example:
        if the class <classname>F3.TYPO3.Foo</classname> exists, it is
        prohibited to create a class
        <classname>F3.TYPO3.Foo.Bar</classname>.You can easily check this: If
        a directory with the same name as the JavaScript file exists, this is
        prohibited.</para>

        <para>Here follows an example:</para>

        <programlisting>F3.TYPO3.Foo.Bar // implemented in .../Foo/Bar.js
F3.TYPO3.Foo.Bar = ...

F3.TYPO3.Foo // implemented in ...Foo.js
F3.TYPO3.Foo = ..... <emphasis>overriding the "Bar" class</emphasis></programlisting>

        <para>So, if the class <classname>F3.TYPO3.Foo.Bar</classname> is
        included <emphasis>before</emphasis>
        <classname>F3.TYPO3.Foo</classname>, then the second class definition
        completely overrides the <classname>Bar</classname> object. In order
        to prevent such issues, this constellation is forbidden.</para>
      </listitem>

      <listitem>
        <para>Every class, method and class property should have a doc
        comment.</para>
      </listitem>

      <listitem>
        <para>Private methods and properties should start with an underscore
        (<code>_</code>) and have a <code>@private</code> annotation.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Doc Comments</title>

    <para>TODO</para>

    <para>- what are possible doc comments</para>

    <para>-&gt; we use http://code.google.com/p/ext-doc/ for rendering, that's
    why parameters have to define a {String} @author annotation </para>

    <para>-&gt; not yet decided if we use it no @api annotation!</para>
  </section>

  <section>
    <title>Class Definitions</title>

    <para>Classes can be singleton or prototype. TODO: Add definition of
    singleton and prototype.</para>

    <para> You will find examples for both below.</para>

    <section>
      <title>Prototype Class Definitions</title>

      <example>
        <title>Example of a prototype class definition</title>

        <programlisting>Ext.ns("F3.TYPO3.Content");<co
            xml:id="prototypeClassDefinition.1" />

// TODO: insert License

/**
 * @class F3.TYPO3.Content.FrontendEditor<co
            xml:id="prototypeClassDefinition.2" />
 *
 * The main frontend editor.<co xml:id="prototypeClassDefinition.3" />
 *
 * @namespace F3.TYPO3.Content<co xml:id="prototypeClassDefinition.4" />
 * @extends Ext.Container
 */
F3.TYPO3.Content.FrontendEditor = Ext.extend(Ext.Container, {<co
            xml:id="prototypeClassDefinition.5" />
	// here comes the class contents
});
Ext.reg('F3.TYPO3.Content.FrontendEditor', F3.TYPO3.Content.FrontendEditor);<co
            xml:id="prototypeClassDefinition.6" /></programlisting>

        <calloutlist>
          <callout arearefs="prototypeClassDefinition.1">
            <para>At the very beginning of the file is the namespace
            declaration of the class, followed by a newline.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.2">
            <para>Then follows the class documentation block, which
            <emphasis>must</emphasis> start with the <code>@class</code>
            declaration in the first line.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.3">
            <para>Now comes a description of the class, possibly with
            examples.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.4">
            <para>Afterwards <emphasis>must</emphasis> follow the namespace of
            the class and the information about object extension.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.5">
            <para>Now comes the actual class definition, using
            <code>Ext.extend</code>.</para>
          </callout>

          <callout arearefs="prototypeClassDefinition.6">
            <para>As the last line of the class, it follows the xType
            registration. We always use the fully qualified class name as
            xtype</para>
          </callout>
        </calloutlist>
      </example>

      <para>Usually, the constructor of the class receives a hash of
      parameters. The possible configuration options need to be documented
      inside the class with the following annotation:</para>

      <programlisting>/**
 * An explanation of the configuration option followed
 * by a blank line.
 * 
 * @cfg {Number} configTwo
 */
configTwo: 10,</programlisting>
    </section>

    <section>
      <title>Singleton Class Definitions</title>

      <para>Now comes a singleton class definition. You will see that it is
      very similar to a prototype class definition, we will only highlight the
      differences.</para>

      <example>
        <title>Example of a singleton class definition</title>

        <programlisting>Ext.ns("F3.TYPO3.Core");

/**
 * @class F3.TYPO3.Core.Application
 *
 * The main entry point which controls the lifecycle of the application.
 *
 * @namespace F3.TYPO3.Core
 * @extends Ext.util.Observable
 * @singleton<co xml:id="singletonClassDefinition.1" />
 */
F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, {<co
            xml:id="singletonClassDefinition.2" />
	// here comes the class contents
});<co xml:id="singletonClassDefinition.3" /></programlisting>

        <calloutlist>
          <callout arearefs="singletonClassDefinition.1">
            <para>You should add a <code>@singleton</code> annotation to the
            class doc comment after the <code>@namespace</code> and
            <code>@extends</code> annotation</para>
          </callout>

          <callout arearefs="singletonClassDefinition.2">
            <para>In singleton classes, you use <code>Ext.apply</code>. Note
            that you need to use <code>new</code> to instanciate the base
            class.</para>
          </callout>

          <callout arearefs="singletonClassDefinition.3">
            <para>There is <emphasis>no xType</emphasis> registration in
            singletons, as they are available globally anyhow.</para>
          </callout>
        </calloutlist>
      </example>
    </section>
  </section>

  <section>
    <title>Method Definitions</title>

    <para>Methods should be documented the following way:</para>

    <example>
      <title>Example of a method comment</title>

      <programlisting>...
F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, { // this is just an example class definition
	... propery definitions ...
	/**
	 * This is a method declaration
	 *
	 * @param {String} param1 Parameter name
	 * @param {String} param2 (Optional) Optional parameter
	 * @return {Boolean} Return value
	 */
	aPublicMethod: function(param1, param2) {
		return true;
	},<co xml:id="exampleMethodComment.1" />

	/**
	 * this is a private function of this class,
	 * the private anotation marks them an prevent that they
	 * are listed in the api doc. As they are private, they
	 * have to start with an underscore as well.
	 *
	 * @return {void}
	 * @private
	 */
	_sampleMethod: function() {
	}
}
...</programlisting>

      <calloutlist>
        <callout arearefs="exampleMethodComment.1">
          <para>There should be a blank line between methods.</para>
        </callout>
      </calloutlist>
    </example>

    <para>Contrary to what is defined in the FLOW3 PHP Coding Guidelines,
    methods which are public <emphasis>automatically belong to the public
    API</emphasis>, without an <code>@api</code> annotation. Contrary, methods
    which do <emphasis>not belong to the public API</emphasis> need to begin
    with an underscore and have the <code>@private</code> annotation.</para>
  </section>

  <section>
    <title>Property Definitions</title>

    <para>All properties of a class need to be properly documented as well,
    with an <code>@type</code> annotation. If a property is private, it should
    start with an underscore and have the <code>@private</code> annotation at
    the last line of its doc comment.</para>

    <programlisting>...
F3.TYPO3.Core.Application = Ext.apply(new Ext.util.Observable, { // this is just an example class definition
	/**
	 * Explanation of the property
	 * which is followed by a newline
	 *
	 * @type {String}
	 */
	propertyOne: 'Hello',

	/**
	 * Now follows a private property
	 * which starts with an underscore.
	 *
	 * @type {Number}
	 * @private
	 */
	_thePrivateProperty: null,
	...
}</programlisting>
  </section>

  <section>
    <title>Code Style</title>

    <itemizedlist>
      <listitem>
        <para>use single quotes(') instead of double quotes(") for string
        quoting</para>
      </listitem>

      <listitem>
        <para>Multiline strings (using <code>\</code>) are forbidden. Instead,
        multiline strings should be written like this:</para>

        <programlisting>'Some String' +
' which spans' +
' multiple lines'</programlisting>
      </listitem>

      <listitem>
        <para>There is no limitation on line length.</para>
      </listitem>

      <listitem>
        <para>JavaScript Constants (true, false, null) should be written
        lowercase, and not uppercase.</para>
      </listitem>

      <listitem>
        <para>Custom JavaScript Constants should be avoided.</para>
      </listitem>

      <listitem>
        <para>Use a single <code>var</code> statement at the top of a method
        to declare all variables. Example:</para>

        <programlisting>function() {
	var myVariable1, myVariable2, someText;
	// now, use myVariable1, ....
}
TODO: Discuss the following (inline assignment):
function() {
	var myVariable1 = Ext.getComponent(...),
	    variable2, variable3;
}
-&gt; i feel it makes the code more unreadable, so I would suggest to use variant 1.</programlisting>
      </listitem>

      <listitem>
        <para>We use <emphasis>a single TAB</emphasis> for indentation.</para>
      </listitem>

      <listitem>
        <para>Use inline comments sparingly, they are often a hint that a new
        method must be introduced.</para>

        <para>Inline Comments must be indented <emphasis>one level
        deeper</emphasis> than the current nesting level. Example:</para>

        <programlisting>function() {
	var foo;
		// Explain what we are doing here.
	foo = '123';
}</programlisting>
      </listitem>

      <listitem>
        <para>White Spaces around control structures like <code>if</code>,
        <code>else</code>, ... should be inserted like in the FLOW3
        CGLs:</para>

        <programlisting>if (myExpression) {
	// if part
} else {
	// Else Part
}</programlisting>
      </listitem>

      <listitem>
        <para>Arrays and Objects should <emphasis>never</emphasis> have a
        trailing comma after their last element,</para>
      </listitem>

      <listitem>
        <para>Arrays and objects should be formatted in the following
        way:</para>

        <programlisting>[
	{
		foo: 'bar'    
	}, {
		x: y
	}
]</programlisting>
      </listitem>

      <listitem>
        <para>Method calls should be formatted the following way:</para>

        <programlisting>// for simple parameters:
new Ext.blah(options, scope, foo);
object.myMethod(foo, bar, baz);

// when the method takes a <emphasis>single</emphasis> parameter of type <emphasis>object</emphasis> as argument, and this object is specified directly in place:
new Ext.Panel({
	a: 'b',
	c: 'd'
});

// when the method takes more parameters, and one is a configuration object which is specified in place:
new Ext.blah(
	{
		foo: 'bar'
	},
	scope,
	options
);</programlisting>
      </listitem>
    </itemizedlist>

    <para>-&gt; Validation through JSLint (We need a config file / step by
    step HowTo) -- Fabien has a small tutorial on that. TODO Fabien: attach
    the tutorial to forge issue </para>

    <para>-&gt; RockstarApps?</para>

    <para>-&gt; Spket JavaScript Codeformatter</para>

    <para>-&gt; TODO: are there JS Code Formatters / Indenters?</para>

    <section>
      <title>Event Handling</title>

      <para>When registering an event handler, always use explicit functions
      instead of inline functions to allow overriding of the event
      handler.</para>

      <para>Additionally, this function needs to be prefixed with
      <code>on</code> to mark it as event handler function. Below follows an
      example for good and bad code.</para>

      <example>
        <title>Good Event Handler Code</title>

        <programlisting>F3.TYPO3.Application.on('theEventName', this._onCustomEvent, this);</programlisting>
      </example>

      <example>
        <title>Bad Event Handler Code</title>

        <programlisting>F3.TYPO3.Application.on(
  'theEventName',
  function() {
    alert('Text');
  }, 
  this
);</programlisting>
      </example>

      <para>All events need to be explicitely documented inside the class
      where they are fired onto with an <code>@event</code> annotation. TODO:
      explain it more, and add context</para>

      <para>Here follows an example:</para>

      <programlisting>/**
 * @event eventOne Event declaration
 */

/**
 * @event eventTwo Event with parameters
 * @param {String} param1 Parameter name
 * @param {Object} param2 Parameter name
 * &lt;ul&gt;
 * &lt;li&gt;&lt;b&gt;property1:&lt;/b&gt; description of property1&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;property2:&lt;/b&gt; description of property2&lt;/li&gt;
 * &lt;/ul&gt;
 */</programlisting>

      <para>Additionally, make sure to document if the scope of the event
      handler is not set to <code>this</code>, i.e. does not point to its
      class, as the user expects this.</para>
    </section>
  </section>

  <section>
    <title>ExtJS specific things</title>

    <para>TODO</para>

    <para>-&gt; how to extend Data Stores (for example)</para>

    <para>-&gt; how to extend Ext components</para>

    <para>-&gt; datastore extended?</para>

    <para>-&gt; can be extended by using constructer() not initComponets()
    like it is for panels and so on </para>
  </section>

  <section>
    <title>Unit Testing</title>

    <para>TODO: http://developer.yahoo.com/yui/3/test/</para>
  </section>
</chapter>
