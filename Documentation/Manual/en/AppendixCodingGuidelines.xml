<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:ns="http://docbook.org/ns/docbook"
         xmlns:mathml="http://www.w3.org/1998/Math/MathML">
  <title>Coding Guidelines</title>

  <para>Coding Standards are an important factor for achieving a high code
  quality. A common visual style, naming conventions and other technical
  settings allow us to produce a homogenous code which is easy to read and
  maintain. However, not all important factors can be covered by rules and
  coding standards. Equally important is the style in which certain problems
  are solved programmatically - it's the personality and experience of the
  individual developer which shines through and ultimately makes the
  difference between technically okay code or a well considered, mature
  solution.</para>

  <para>These guidelines try to cover both, the technical standards as well as
  giving incentives for a common development style. These guidelines must be
  followed by everyone who creates code for the FLOW3 core. Because TYPO3 is
  based on FLOW3, it follows the same principles - therefore, whenever we
  mention FLOW3 in the following sections, we equally refer to TYPO3. We hope
  that you feel encouraged to follow these guidelines as well when creating
  your own packages and FLOW3 based applications.</para>

  <section>
    <title>Code formatting and layout</title>

    <subtitle>aka "beautiful code"</subtitle>

    <para>The visual style of programming code is very important. In the TYPO3
    project we want many programmers to contribute, but in the same style.
    This will help us to:</para>

    <itemizedlist>
      <listitem>
        <para>Easily read/understand each others code and consequently easily
        spot security problems or optimization opportunities</para>
      </listitem>

      <listitem>
        <para>It is a signal about consistency and cleanliness, which is a
        motivating factor for programmers striving for excellence</para>
      </listitem>
    </itemizedlist>

    <para>Some people may object to the visual guidelines since everyone has
    his own habits. You will have to overcome that in the case of FLOW3; the
    visual guidelines must be followed along with coding guidelines for
    security. We want all contributions to the project to be as similar in
    style and as secure as possible.</para>

    <section>
      <title>General considerations</title>

      <itemizedlist>
        <listitem>
          <para>Nearly any PHP file in FLOW3 contains exactly one class and
          does not output anything if it is called directly. Therefore you
          start you file with a <code>&lt;?php</code> tag and end it with the
          closing <code>?&gt;</code>.</para>
        </listitem>

        <listitem>
          <para>Every file must contain a header stating encoding, namespace,
          copyright and licensing information</para>

          <para><orderedlist>
              <listitem>
                <para>Declare your namespace. The namespace must start with
                "F3"!</para>
              </listitem>

              <listitem>
                <para>Because it is likely that more than one person will work
                on a class in the long run, we recommend adding a copyright
                statement like <quote>Copyright belongs to the respective
                authors</quote> and add yourself to the list of authors for
                the methods you implemented.</para>
              </listitem>

              <listitem>
                <para>If you modify a library you must document what you have
                changed (GPL requirement). Add your name as author / co-author
                to these modifications.</para>
              </listitem>

              <listitem>
                <para>The importance of the header is primarily to state that
                the code is GPL'ed. And remember only GPL compatible software
                is allowed to interface with FLOW3 (according to GPL
                itself).</para>
              </listitem>

              <listitem>
                <para>The copyright header itself must not start with
                <literal>/**</literal>, as this may confuse documentation
                generators!</para>
              </listitem>
            </orderedlist></para>

          <example>
            <title>The FLOW3 standard file header</title>

            <literallayout>&lt;?php
declare(ENCODING = 'utf-8');
namespace F3::Your::Stuff::Here;

/*                                                                         *
 * This script is part of the TYPO3 project - inspiring people to share!   *
 *                                                                         *
 * TYPO3 and FLOW3 are free software; you can redistribute them and/or   *
 * modify them under the terms of the GNU General Public License version 2 *
 * as published by the Free Software Foundation.                           *
 *                                                                         *
 * This script is distributed in the hope that it will be useful, but      *
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHAN-     *
 * TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General       *
 * Public License for more details.                                        *
 *                                                                         */
</literallayout>
          </example>
        </listitem>

        <listitem>
          <para>Code lines are of arbitrary length, no limitations to 80
          characters or something similar (wake up, graphical displays has
          been available for decades now...)</para>
        </listitem>

        <listitem>
          <para>Lines end with a newline a.k.a <code>chr(10)</code> - UNIX
          style</para>
        </listitem>

        <listitem>
          <para>Files must be encoded in UTF-8</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Indentation and line formatting</title>

      <para>Indentation is done with tabs - and not spaces! The beginning of a
      line is the only place where tabs are used, in all other places use
      spaces. Always trim whitespace off the end of a line.</para>

      <para>Here's a code snippet which shows the correct usage of tabs and
      spaces:</para>

      <para><example>
          <title>Correct use of tabs and spaces</title>

          <literallayout>/*‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧*
‧*‧Some‧comment‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧*
‧*‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧‧*/

/**
‧*‧Returns‧the‧name‧of‧the‧currently‧set‧context.
‧*
‧*‧@return‧string‧Name‧of‧the‧current‧context
‧*‧@author‧Your Name &lt;your@email.here&gt;
‧*/
public‧function‧getContext()‧{
»   return‧$this-&gt;context;
}</literallayout>
        </example></para>

      <para>There seem to be very passionate opinions about whether TABs or
      spaces should be used for indentation of code blocks in the scripts. If
      you'd like to read more about this religious discussion, you find some
      nice arguments in the <link
      xl:href="http://discuss.fogcreek.com/joelonsoftware/default.asp?cmd=show&amp;ixPost=3978">Joels
      on Software forum</link>.</para>
    </section>

    <section>
      <title>Naming</title>

      <para>Naming is a repeatedly undervalued factor in the art of software
      development. Although everybody seems to agree on that nice names are a
      nice thing to have, most developers choose cryptic abbreviations in the
      end (to save some typing). Beware that we TYPO3 core developers are very
      passionate about naming (some people call it fanatic, well ...). In our
      opinion spending 15 minutes (or more ...) just to find a good name for a
      method is well spent time! There are zillions of reasons for using
      proper names and in the end they all lead to better readable,
      manageable, stable and secure code.</para>

      <para><itemizedlist>
          <listitem>
            <para>As a general note, english words (or abbreviations if
            neccessary) must be used for all class names, method names,
            comments, variables names, database table and field names.
            Although PHP6 allows for using funny japanese, tibetian or
            don't-know-what characters, the consensus is that english is much
            better to read for the most of us.</para>
          </listitem>

          <listitem>
            <para>If acronyms or abbreviations are embedded in names, keep
            them in the case they usually are, i.e. keep
            <acronym>URL</acronym> uppercase, also when used in a method name
            like <methodname>getURLForLink()</methodname>,
            <classname>ACMEManager</classname> etc.</para>
          </listitem>
        </itemizedlist></para>

      <section>
        <title>Package names</title>

        <para>All package names are written in
        <package>UpperCamelCase</package>. In order to avoid problems with
        different filesystems, only the characters a-z, A-Z and 0-9 are
        allowed for package names – don't use special characters.</para>
      </section>

      <section>
        <title>Class names</title>

        <para>Only the characters a-z, A-Z and 0-9 are allowed for class names
        – don't use special characters.</para>

        <para>All class names are written in
        <classname>UpperCamelCase</classname>, all uppercase names are allowed
        for well established abbreviations. Class names must be nouns, never
        adjectives.</para>

        <para>The name of abstract classes should start with the word
        "Abstract".</para>

        <para>A few examples follow:</para>

        <example>
          <title>Correct naming of classes</title>

          <itemizedlist>
            <listitem>
              <para><classname>F3::FLOW3::Component</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::FLOW3::Component::Manager</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::MySubComponent</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::MyHTMLParser</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::Foo::Controller::DefaultController</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::AbstractLogger</classname></para>
            </listitem>
          </itemizedlist>
        </example>

        <example>
          <title>Incorrect naming of classes</title>

          <itemizedlist>
            <listitem>
              <para><classname>myClass</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::Urlwrapper</classname></para>
            </listitem>

            <listitem>
              <para><classname>someComponent::classname</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponentMySubComponent</classname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Interface names</title>

        <para>Only the characters a-z, A-Z and 0-9 are allowed for interface
        names – don't use special characters.</para>

        <para>All interface names are written in
        <classname>UpperCamelCase</classname>, all uppercase names are allowed
        for well established abbreviations. Interface names must be adjectives
        or nouns and have the Interface suffix. A few examples follow:</para>

        <example>
          <title>Correct naming of interfaces</title>

          <itemizedlist>
            <listitem>
              <para><classname>F3::FLOW3::Component::ComponentInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::FLOW3::Component::ManagerInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::MySubComponentInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::MyHTMLParserInterface</classname></para>
            </listitem>
          </itemizedlist>
        </example>

        <example>
          <title>Incorrect naming of interfaces</title>

          <itemizedlist>
            <listitem>
              <para><classname>myInterface</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::Urlwrapper</classname></para>
            </listitem>

            <listitem>
              <para><classname>IsomeComponent::classname</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::FLOW3::Component::Manager::Interface</classname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Exception names</title>

        <para>Exception naming basically follows the rules for naming classes.
        There are two possible types of exceptions: Generic exceptions and
        specific exceptions. Generic exceptions should be named "Exception"
        preceeded by their namespace. Specific exceptions should reside in
        their own sub-namespace and must not contain the word
        <literal>Exception</literal>.</para>

        <example>
          <title>Correct naming of exceptions</title>

          <itemizedlist>
            <listitem>
              <para><classname>F3::FLOW3::Component::Exception</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::FLOW3::Component::Exception::InvalidClassName</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::Exception</classname></para>
            </listitem>

            <listitem>
              <para><classname>F3::MyPackage::MyComponent::Exception::OutOfCoffee</classname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Method names</title>

        <para>All method names are written in lowerCamelCase, all uppercase
        names are allowed for well established abbreviations. In order to
        avoid problems with different filesystems, only the characters a-z,
        A-Z and 0-9 are allowed for method names – don't use special
        characters.</para>

        <para>Make method names descriptive, but keep them concise at the same
        time. Constructors must always be called
        <function>__construct()</function>, never use the class name as a
        method name.</para>

        <para>A few examples:</para>

        <example>
          <title>Correct naming of methods</title>

          <itemizedlist>
            <listitem>
              <para><methodname>myMethod()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>someNiceMethodName()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>betterWriteLongMethodNamesThanNamesNobodyUnderstands()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>singYMCALoudly()</methodname></para>
            </listitem>

            <listitem>
              <para><methodname>__construct()</methodname></para>
            </listitem>
          </itemizedlist>
        </example>
      </section>

      <section>
        <title>Variable names</title>

        <para>Variable names are written in <varname>lowerCamelCase</varname>
        and should be</para>

        <itemizedlist>
          <listitem>
            <para>self-explaining</para>
          </listitem>

          <listitem>
            <para>not shortened beyond recognition, but rather longer if it
            makes their meaning clearer</para>
          </listitem>
        </itemizedlist>

        <para>The following example shows two variables with the same meaning
        but different naming. You'll surely agree the longer versions are
        better (don't you ...?).</para>

        <example>
          <title>Correct naming of variables</title>

          <itemizedlist>
            <listitem>
              <para><varname>$singletonObjectsRegistry</varname></para>
            </listitem>

            <listitem>
              <para><varname>$argumentsArray</varname></para>
            </listitem>

            <listitem>
              <para><varname>$aLotOfHTMLCode</varname></para>
            </listitem>
          </itemizedlist>
        </example>

        <example>
          <title>Incorrect naming of variables</title>

          <itemizedlist>
            <listitem>
              <para><varname>$sObjRgstry</varname></para>
            </listitem>

            <listitem>
              <para><varname>$argArr</varname></para>
            </listitem>

            <listitem>
              <para><varname>$cx</varname></para>
            </listitem>
          </itemizedlist>
        </example>

        <para>As a special exception you may use variable names like
        <varname>$i</varname>, <varname>$j</varname> and <varname>$k</varname>
        for numeric indexes in <function>for</function> loops if it's clear
        what they mean on the first sight. But even then you might want to
        avoid them.</para>
      </section>

      <section>
        <title>Constant names</title>

        <para>All constant names are written in
        <constant>UPPERCASE</constant>. This includes
        <constant>TRUE</constant>, <constant>FALSE</constant> and
        <constant>NULL</constant>. Words can be separated by underscores - you
        can also use the underscore to group constants thematically:</para>

        <example>
          <title>Correct naming of constants</title>

          <itemizedlist>
            <listitem>
              <para><constant>STUFF_LEVEL</constant></para>
            </listitem>

            <listitem>
              <para><constant>COOLNESS_FACTOR</constant></para>
            </listitem>

            <listitem>
              <para><constant>PATTERN_MATCH_EMAILADDRESS</constant></para>
            </listitem>

            <listitem>
              <para><classname>PATTERN_MATCH_VALIDHTMLTAGS</classname></para>
            </listitem>
          </itemizedlist>
        </example>

        <para>It is, by the way, a good idea to use constants for defining
        regular expression patterns (as seen above) instead of defining them
        somewhere in your code.</para>
      </section>

      <section>
        <title>File names</title>

        <para>These are the rules for naming files:</para>

        <itemizedlist>
          <listitem>
            <para>All file names are
            <filename>UpperCamelCase</filename>.</para>
          </listitem>

          <listitem>
            <para>Class and interface files are named according to the class
            or interface they represent</para>
          </listitem>

          <listitem>
            <para>Each file must contain only one class or interface</para>
          </listitem>

          <listitem>
            <para>Names of files containing code for unit tests must be the
            same as the class which is tested, appended with
            "Test.php".</para>
          </listitem>
        </itemizedlist>

        <para>Here are some examples:<example>
            <title>File naming in FLOW3</title>

            <para><itemizedlist>
                <listitem>
                  <para><filename>F3_TemplateEngine_TemplateEngineInterface.php</filename></para>

                  <para>Contains the interface
                  <classname>F3::TemplateEngine::TemplateEngineInterface</classname>
                  which is part of the package
                  <package>F3::TemplateEngine</package></para>
                </listitem>

                <listitem>
                  <para><filename>F3_Error_RuntimeException.php</filename></para>

                  <para>Contains the
                  <classname>F3::Error::RuntimeException</classname> being a
                  part of the package <package>F3::Error</package></para>
                </listitem>

                <listitem>
                  <para><filename>F3_DataAccess_Manager.php</filename></para>

                  <para>Contains class
                  <classname>F3::DataAccess::Manager</classname> which is part
                  of the package <package>F3::DataAccess</package></para>
                </listitem>

                <listitem>
                  <para><filename>F3_FLOW3_Package_Manager.php</filename></para>

                  <para>Contains the class
                  <classname>F3::FLOW3::Package::Manager</classname> which is
                  part of the package <package>F3::FLOW3</package></para>
                </listitem>

                <listitem>
                  <para><filename>F3_FLOW3_Package_ManagerTest.php</filename></para>

                  <para>Contains the class
                  <classname>F3::FLOW3::Package::ManagerTest</classname> which
                  is a test case for PHPUnit.</para>
                </listitem>
              </itemizedlist></para>
          </example></para>
      </section>
    </section>

    <section>
      <title>PHP code formatting</title>

      <section>
        <title>Strings</title>

        <para>In general, we use single quotes to enclose literal
        strings:</para>

        <example>
          <title>String literals</title>

          <literallayout>$vision = 'Inspiring people to share';</literallayout>
        </example>

        <para>If the string itself contains single quotes or apostrophes, we
        use double quotes:</para>

        <example>
          <title>String literals enclosed by double quotes</title>

          <literallayout>$message = "'Kasper' is the name of the friendly ghost.";</literallayout>
        </example>

        <para>If you'd like to insert values from variables, we recommend to
        concatenate strings or use double quotes in the following form:</para>

        <example>
          <title>Variable substitution</title>

          <literallayout>$message = 'Hey ' . $name . ', you look ' . $look . ' today!';
$message = "Hey $name, you look $look today!";</literallayout>
        </example>

        <para>As you've seen in the previous example, we concatenate strings
        by using the dot operator. A space must be inserted before and after
        the dot for better readability:</para>

        <example>
          <title>Concatenated strings</title>

          <literallayout>$vision = 'Inspiring people ' . 'to share.';</literallayout>
        </example>

        <para>You may break a string into multiple lines if you use the dot
        operator. You'll have to indent each following line to mark them as
        part of the value assignment:</para>

        <example>
          <title>Multi-line strings</title>

          <literallayout>$vision = 'Inspiring' .
   'people ' .
   'to ' .
   'share';</literallayout>
        </example>
      </section>

      <section>
        <title>Arrays</title>

        <para></para>
      </section>

      <section>
        <title>Classes</title>

        <para>...<example>
            <title>Classes</title>

            <literallayout>namespace F3::MyPackage;

class MyComponent {

}</literallayout>
          </example></para>
      </section>

      <section>
        <title>Functions and methods</title>

        <para></para>
      </section>

      <section>
        <title>if statements</title>

        <para><itemizedlist>
            <listitem>
              <para>There needs to be one space between the
              <function>if</function> keyword and the opening brace "("</para>
            </listitem>

            <listitem>
              <para>...</para>
            </listitem>
          </itemizedlist><example>
            <title>if statements</title>

            <literallayout>if ($something || $somethingElse) {
   doThis();
} else {
   doSomethingElse();
}

if (allGoesWrong()) throw new Exception('Hey, all went wrong!');

if (weHaveALotOfCriteria()
   &amp;&amp; notEverythingFitsIntoOneLine()
   || youJustTendToLikeIt()) {
      doThis();

} else {
   ...
}</literallayout>
          </example></para>
      </section>
    </section>
  </section>

  <section>
    <title>Documentation</title>

    <para>All code must be documented with inline comments. The syntax is that
    known from the Java programming language (JavaDoc). This way code
    documentation can automatically be generated using tools like
    phpDocumentor or Doxygen. The "official" tool used is
    phpDocumentor<footnote>
        <para>We look into Doxygen as well, currently both tools have problems
        with using namespaces in PHP.</para>
      </footnote>, so syntax and documentation usage are chosen to work best
    with it.</para>

    <section>
      <title>Documentation blocks</title>

      <para>A file can contain different documentation blocks, relating to the
      file itself, the class in the file and finally the members of the class.
      A documentation block is always used for the entity it precedes.</para>

      <section>
        <title>File documentation</title>

        <para>The first documentation block in the file is essential for
        defining the package the file and it's contents belong to. Although it
        would not be strictly needed to have the file level documentation
        block (because each file contains only one class in FLOW3), we still
        use it because it</para>

        <itemizedlist>
          <listitem>
            <para>avoids warnings when rendering the documentation</para>
          </listitem>

          <listitem>
            <para>makes sure that even code outside of classes is assigned to
            the correct package and documented correctly</para>
          </listitem>
        </itemizedlist>

        <para>That means that each file must contain a documentation block
        like shown below, right below the header stating the license:</para>

        <example>
          <title>Standard file level documentation block</title>

          <literallayout>/**
 * @package    [packagename]
 * @subpackage [subpackage name if necessary]
 * @version    $Id$
 */</literallayout>
        </example>

        <para>The package tag is mandatory, the subpackage tag is optional and
        should only be used if needed.</para>

        <important>
          <title>$Id$, Subversion and keyword expansion</title>

          <para>The $Id$ in the version tag will be expanded with information
          about the file version by Subversion. This so-called keyword
          expansion needs to be explicitly enabled, though! We recommend to
          put this into your <filename>~.subversion/config
          file</filename>:</para>

          <example>
            <title>Suggested configuration for Subversion in
            <filename>~/.subversion/config</filename></title>

            <para><literallayout>[miscellany]
global-ignores = #*# *.rej *.orig *.bak *~ .*
log-encoding = utf-8
enable-auto-props = yes
[auto-props]
*.php = svn:keywords=Id Revision</literallayout></para>
          </example>

          <para>This does a little more than just enable the keyword
          expansion, it also sets the character encoding for the log messages
          and makes Subversion ignore some standard backup and metadata
          filenames.</para>
        </important>
      </section>

      <section>
        <title>Class documentation</title>

        <para>Classes have their own documentation block describing the
        classes purpose, assigning a package and subpackage. Very often the
        code within a class is expanded and modified by a number of authors.
        We therefore recommend to add the names of the developers to the
        method documentation. An exception should be the documentation for
        interfaces where you list all authors in the interface documentation.
        Exceptions itself never have an author annotation.</para>

        <example>
          <title>Standard class documentation block</title>

          <literallayout>/**
 * First sentence is short description. Then you can write more, just as you like
 *
 * Here may follow some detailed description about what the class is for.
 *
 * Paragraphs are seperated by a empty line.
 *
 * @package [packagename]
 * @subpackage [subpackage name if necessary]
 * @version $Id$
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License, version 2
 */
class SomeClass {
 ...</literallayout>
        </example>

        <example>
          <title>Standard interface documentation block</title>

          <literallayout>/**
 * First sentence is short description. Then you can write more, just as you like
 *
 * Here may follow some detailed description about what the interface is for.
 *
 * Paragraphs are seperated by a empty line.
 *
 * @package [packagename]
 * @subpackage [subpackage name if necessary]
 * @version $Id$
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License, version 2
 * @author Your Name &lt;your@email.here&gt;
 */
interface SomeInterface {
 ...</literallayout>
        </example>

        <example>
          <title>Standard exception documentation block</title>

          <literallayout>/**
 * First sentence is short description. Then you can write more, just as you like
 *
 * Here may follow some detailed description about what the interface is for.
 *
 * Paragraphs are seperated by a empty line.
 *
 * @package [packagename]
 * @subpackage [subpackage name if necessary]
 * @version    $Id$
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License, version 2
 */
class SomeException extends ::Exception {
 ...</literallayout>
        </example>

        <para>Additional tags or annotations, such as @see or @aspect, can be
        added as needed.</para>
      </section>

      <section>
        <title>Documenting variables, constants, includes</title>

        <para>Properties of a class should be documented as well. We use the
        short version for documenting them:</para>

        <example>
          <title>Standard variable documentation block</title>

          <literallayout>/**
 * A short description, very much recommended
 * @var string
 */
protected $title = 'Untitled';</literallayout>
        </example>
      </section>

      <section>
        <title>Method documentation</title>

        <para>For a method, at least all parameters and the return value must
        be documented. Please also add your name by using the @author tag. The
        @access tag must not be used as it makes no sense (we're using PHP
        &gt;= 5 for some reason, don't we?)</para>

        <example>
          <title>Standard method documentation block</title>

          <literallayout>/**
 * A description for this method
 *
 * Paragraphs are seperated by a empty line.
 *
 * @param F3::FLOW3::Log::LoggerInterface $logger A logger
 * @param string $someString This parameter should contain some string
 * @return void
 * @author Your Name &lt;your@email.here&gt;
 */
public function __construct(F3::FLOW3::Log::LoggerInterface $logger, $someString) {
 ...</literallayout>
        </example>

        <para>A special note about the @param tags: The parameter type and
        name are seperated by one space, not aligned. Do not put a colon after
        the parameter name. Always document the return type, even if it is
        void - that way it is clearly visible it hasn't just been
        forgotten.</para>
      </section>
    </section>

    <section>
      <title>Documentation tags</title>

      <para>There are quite a few documentation tags that can be used. Here is
      a list of tags that can and should be used within the TYPO3
      project:</para>

      <itemizedlist>
        <listitem>
          <para>@author</para>
        </listitem>

        <listitem>
          <para>@copyright</para>
        </listitem>

        <listitem>
          <para>@deprecated</para>
        </listitem>

        <listitem>
          <para>@example</para>
        </listitem>

        <listitem>
          <para>@filesource</para>
        </listitem>

        <listitem>
          <para>@global</para>
        </listitem>

        <listitem>
          <para>@ignore</para>
        </listitem>

        <listitem>
          <para>@internal</para>
        </listitem>

        <listitem>
          <para>@license</para>
        </listitem>

        <listitem>
          <para>@link</para>
        </listitem>

        <listitem>
          <para>@package</para>
        </listitem>

        <listitem>
          <para>@param</para>
        </listitem>

        <listitem>
          <para>@return</para>
        </listitem>

        <listitem>
          <para>@see</para>
        </listitem>

        <listitem>
          <para>@since</para>
        </listitem>

        <listitem>
          <para>@subpackage</para>
        </listitem>

        <listitem>
          <para>@todo</para>
        </listitem>

        <listitem>
          <para>@uses</para>
        </listitem>

        <listitem>
          <para>@var</para>
        </listitem>

        <listitem>
          <para>@version</para>
        </listitem>
      </itemizedlist>

      <para>Some are useless for PHP5 and PHP6, such as the tag for declaring
      a variable or method private:</para>

      <itemizedlist>
        <listitem>
          <para>@access</para>
        </listitem>
      </itemizedlist>

      <important>
        <para>If you are unsure about the meaning or ose of those tags, look
        them up in the phpDocumentor manual, rather than doing
        guesswork.</para>
      </important>

      <note>
        <para>There are more tags which are used in FLOW3, however their
        purpose is not documention but configuration. Currently annotations
        are also used for defining aspects and advices for the AOP framework
        as well as for giving instructions to the Persistence
        framework.</para>
      </note>
    </section>
  </section>

  <section>
    <title>Coding</title>

    <section>
      <title>Overview</title>

      <para>This section gives you an overview of FLOW3's coding rules and
      best practices.</para>
    </section>

    <section>
      <title>General PHP best practices</title>

      <itemizedlist>
        <listitem>
          <para>All code should be object oriented. This means there should be
          no functions outside classes if not absolutely necessary. If you
          need a "container" for some helper methods, consider creating a
          static class.</para>
        </listitem>

        <listitem>
          <para>All code must make use of PHP5 / PHP6 advanced features for
          object oriented programming.<itemizedlist>
              <listitem>
                <para>Use PHP namespaces (see <link
                xl:href="http://www.php.net/manual/language.namespaces.php">http://www.php.net/manual/language.namespaces.php</link>)</para>
              </listitem>

              <listitem>
                <para>Always declare the scope (public, protected, private) of
                classes and member variables</para>
              </listitem>

              <listitem>
                <para>Make use of iterators and exceptions, have a look at the
                SPL (see <link
                xl:href="http://www.php.net/manual/ref.spl.php">http://www.php.net/manual/ref.spl.php</link>)</para>
              </listitem>

              <listitem>
                <para>Make use of type-hinting wherever possible (see <link
                xl:href="http://www.php.net/manual/language.oop5.typehinting.php">http://www.php.net/manual/language.oop5.typehinting.php</link>)</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>Always use <code>&lt;?php</code> as opening tags (never only
          <code>&lt;?</code>)</para>
        </listitem>

        <listitem>
          <para>Add an encoding declaration as the first line of your PHP
          code, followed by the namespace declaration. For TYPO3 the encoding
          must be <acronym>UTF-8</acronym></para>

          <example>
            <title>Encoding statement for .php files</title>

            <literallayout>&lt;?php
declare(ENCODING = 'utf-8');
namespace F3::Your::Stuff::Here;

...</literallayout>
          </example>
        </listitem>
      </itemizedlist>

      <section>
        <title>Comments</title>

        <para>In general, comments are a good thing and we strive for creating
        a well-documented source code. However, inline comments can often be a
        sign for a bad code structure or method naming.<footnote>
            <para>This is also referred to as a bad "smell" in the theory of
            Refactoring. We highly recommend reading "Refactoring" by Martin
            Fowler - if you didn't already.</para>
          </footnote>As an example, consider the following code:<example>
            <title>Bad coding smell: Comments</title>

            <literallayout>   // We only allow valid persons:
if (is_object($p) &amp;&amp; strlen($p-&gt;lastN) &gt; 0 &amp;&amp; $p-&gt;hidden === FALSE &amp;&amp; $this-&gt;environment-&gt;moonPhase === MOON_LIB::CRESCENT) {
   $xmM = $thd;
}</literallayout>
          </example></para>

        <para>This is a perfect case for the refactoring technique "extract
        method": In order to avoid the comment, create a new method which is
        as explanatory as the comment:</para>

        <example>
          <title>Smells better!</title>

          <literallayout>if ($this-&gt;isValidPerson($person) {
   $xmM = $thd;
}</literallayout>
        </example>

        <para>Bottom line is: You may (and are encouraged to) use inline
        comments if they support the readability of your code. But always be
        aware of possible design flaws you probably try to hide with
        them.</para>
      </section>
    </section>

    <section>
      <title>Error handling and exceptions</title>

      <para>FLOW3 makes use of a hierarchy for its exception classes. The
      general rule is to throw preferably specific exceptions and usually let
      them bubble up until a place where more general exceptions are catched.
      Consider the following example:</para>

      <para>Some method tried to retrieve a component from the component
      manager. However, instead of providing a string containing the component
      name, the method passed an object (of course not on purpose - something
      went wrong). The component manager now throws an
      <classname>InvalidComponentName</classname> exception. In order to catch
      this exception you can, of course, catch it specifically - or only
      consider a more general <classname>Component</classname> exception (or
      an even more general <classname>FLOW3</classname> exception). This all
      works because we have the following hierarchy:</para>

      <literallayout>+ F3::FLOW3::Exception
  + F3::FLOW3::Component::Exception
    + F3::FLOW3::Component::Exception::InvalidComponentName</literallayout>
    </section>

    <section>
      <title>Cross platform issues</title>

      <para></para>
    </section>
  </section>
</section>
