<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Property Mapping Framework</title>

  <para>The Property mappers task is to convert <emphasis>simple
  types</emphasis>, like arrays, strings, numbers, to objects. This is most
  prominently needed in the MVC framework: When a request arrives, it contains
  all its data as simple types, that is strings, and arrays. We want to help
  the developer thinking about <emphasis>objects</emphasis>, that's why we try
  to transparently convert the incoming data to its correct object
  representation. This is the objective of the <emphasis>Property
  Mapper</emphasis>.</para>

  <para>At first, we show some examples on how the property mapper can be
  used, and then the internal structure is explained.</para>

  <para>The main API of the <code>PropertyMapper</code> is very simple: It
  just consists of one method
  <methodname>convert(<replaceable>$source</replaceable>,
  <replaceable>$targetType</replaceable>)</methodname>, which receives input
  data as the first argument, and the target type as second argument. This
  method returns the built object of type <code>$targetType</code>.</para>

  <section>
    <title>Example usage</title>

    <para>The most simple usage is to convert simple types to different simple
    types, i.e. converting a numeric <code>string</code> to a
    <code>float</code> number, as shown in <xref
    linkend="ex-property-mapper-simple-types" />.</para>

    <example xml:id="ex-property-mapper-simple-types">
      <title>Mapping simple types to other simple types using the property
      mapper</title>

      <programlisting>// $propertyMapper is of class TYPO3\FLOW3\Property\PropertyMapper
$result = $propertyMapper-&gt;convert('12.5', 'float');
// $result == (float)12.5</programlisting>
    </example>

    <para>This is of course a really conceived example, as the same result
    could be archieved by just casting the numeric string to a floating point
    number.</para>

    <para>Our next example goes a bit further and shows how we can use the
    Property Mapper to convert an array of data into a domain model shown in
    <xref linkend="ex-property-mapper-domain-object" />.</para>

    <example xml:id="ex-property-mapper-domain-object">
      <title>The example domain object used for the property mapper</title>

      <programlisting>/**
 * @entity
 */
class MyCompany\MyPackage\Domain\Model\Person {
  /**
   * @var string
   */
  protected $name;

  /**
   * @var \DateTime
   */
  protected $birthDate;

  /**
   * @var MyCompany\MyPackage\Domain\Model\Person
   */
  protected $mother;

  // ... furthermore contains getters and setters for the above properties.
}

$inputArray = array(
  'name' =&gt; 'John Fisher',
  'birthDate' =&gt; '1990-11-14T15:32:12+00:00'
);
$person = $propertyMapper-&gt;convert($inputArray, 'MyCompany\MyPackage\Domain\Model\Person');
// $person is a newly created object of type MyCompany\MyPackage\Domain\Model\Person
// $person-&gt;name == 'John Fisher'
// $person-&gt;birthDate is a DateTime object with the correct date set.</programlisting>
    </example>

    <para>We'll first use a simple input array:</para>

    <programlisting>$input = array(
  'name' =&gt; 'John Fisher',
  'birthDate' =&gt; '1990-11-14T15:32:12+00:00'
);</programlisting>

    <para>After calling <code>$propertyMapper-&gt;convert($input,
    'MyCompany\MyPackage\Domain\Model\Person')</code>, we receive a new object of
    type <code>Person</code> which has <code>$name</code> set to <code>John
    Fisher</code>, and <code>$birthDate</code> set to a <code>DateTime</code>
    object of the specified date. You might now wonder how the
    <code>PropertyMapper</code> knows how to convert <code>DateTime</code>
    objects and <code>Person</code> objects? The answer is: it does not know
    that. However, the PropertyMapper calls specialized <code>Type
    Converters</code> which take care of the actual conversion.</para>

    <para>In our example, three type converters are called:</para>

    <itemizedlist>
      <listitem>
        <para>First, to convert <code>'John Fisher'</code> to a
        <code>string</code> (required by the annotation in the domain model),
        a <code>StringConverter</code> is called. This converter simply passes
        through the input string, without modification.</para>
      </listitem>

      <listitem>
        <para>Then, a <code>DateTimeConverter</code> is called, whose
        responsibility is to convert the input string into a valid
        <code>DateTime</code> object.</para>
      </listitem>

      <listitem>
        <para>At the end, the <code>Person</code> object still needs to be
        built. For that, the <code>PersistentObjectConverter</code> is
        responsible. It creates a fresh <code>Person</code> object, and sets
        the <code>$name</code> and <code>$birthDate</code> properties which
        were already built using the type converters above.</para>
      </listitem>
    </itemizedlist>

    <para>This example should illustrate that property mapping is a
    <emphasis>recursive process</emphasis>, and the
    <code>PropertyMapper</code>s task is exactly to orchestrate the different
    <code>TypeConverter</code>s needed to build a big, compound object.</para>

    <para>The <code>PersistentObjectConverter</code> has some more features,
    as it supports fetching objects from the persistence layer if an identity
    for the object is given. Both the following inputs will result in the
    corresponding object to be fetched from the persistence layer:</para>

    <programlisting>$input = '14d20100-9d70-11e0-aa82-0800200c9a66';
$person = $propertyMapper-&gt;convert($input, 'MyCompany\MyPackage\Domain\Model\Person');
// The $person object with UUID 14d20100-9d70-11e0-aa82-0800200c9a66 is fetched from the persistence layer</programlisting>

    <programlisting>$input = array(
  '__identity' =&gt; '14d20100-9d70-11e0-aa82-0800200c9a66'
);
... same code as above ...</programlisting>

    <para>In case some more properties are specified in the array (besides
    <code>__identity</code>), the object is <code>cloned</code> and on the
    clone, the submitted properties are modified. By cloning a domain object,
    it looses its connection to the persistence layer, and modifications are
    not automatically saved to the database at the end of the request.</para>

    <para>So, let's walk through a more complete input example:</para>

    <programlisting>$input = array(
  '__identity' =&gt; '14d20100-9d70-11e0-aa82-0800200c9a66',
  'name' =&gt; 'John Doe',
  'mother' =&gt; 'efd3b461-6f24-499d-97bc-309dfbe01f05'
);</programlisting>

    <para>In this case, the following steps happen:</para>

    <itemizedlist>
      <listitem>
        <para>The <code>Person</code> object with identity
        <code>14d20100-9d70-11e0-aa82-0800200c9a66</code> is fetched from
        persistence. After that, it is <code>cloned</code>, and loses its
        connection to the persistence layer (i.e. modifications are not
        automatically persisted anymore).</para>
      </listitem>

      <listitem>
        <para>The <code>$name</code> of the fetched <code>$person</code>
        object is updated to <code>John Doe</code></para>
      </listitem>

      <listitem>
        <para>As the <code>$mother</code> property is also of type
        <code>Person</code>, the <code>PersistentObjectConverter</code> is
        invoked recursively. It fetches the <code>Person</code> object with
        UUID <code>efd3b461-6f24-499d-97bc-309dfbe01f05</code>, which is then
        set as the <code>$mother</code> property of the original
        person.</para>
      </listitem>
    </itemizedlist>

    <para>Here, you see that we can also set <emphasis>associations</emphasis>
    using the Property Mapper.</para>
  </section>

  <section>
    <title>Configuring the conversion process</title>

    <para>It is possible to configure the conversion process by specifying a
    <code>PropertyMappingConfiguration</code> as third parameter to
    <code>PropertyMapper::convert()</code>. If no
    <code>PropertyMappingConfiguration</code> is specified, the
    <code>PropertyMappingConfigurationBuilder</code> automatically creates a
    default <code>PropertyMappingConfiguration</code> (described in <xref
    linkend="property-mapper-default-configuration" />).</para>

    <para>In most cases, you should use the
    <code>PropertyMappingConfigurationBuilder</code> to create a new
    <code>PropertyMappingConfiguration</code>, so that you get a
    safe-by-default configuration (see <xref
    linkend="property-mapper-default-configuration" />):</para>

    <example>
      <title>Skeleton of creating a property mapping configuration</title>

      <programlisting>// $propertyMappingConfigurationBuilder instanceof TYPO3\FLOW3\Property\PropertyMappingConfigurationBuilder
$propertyMappingConfiguration = $propertyMappingConfigurationBuilder-&gt;build();

<emphasis>// modify $propertyMappingConfiguration</emphasis>

$propertyMapper-&gt;convert($source, $targetType, <emphasis>$propertyMappingConfiguration</emphasis>);</programlisting>
    </example>

    <para>The following configuration options exist:</para>

    <itemizedlist>
      <listitem>
        <para><code>setMapping($sourcePropertyName,
        $targetPropertyName)</code> can be used to rename properties.</para>

        <para>Example: If the input array contains a property
        <code>lastName</code>, but the accordant property in the model is
        called <code>$givenName</code>, the following configuration performs
        the renaming:</para>

        <programlisting>$propertyMappingConfiguration-&gt;setMapping('lastName', 'givenName');</programlisting>
      </listitem>

      <listitem>
        <para><code>setTypeConverter($typeConverter)</code> can be used to
        directly set a type converter which should be used. This disables the
        automatic resolving of type converters (see <xref
        linkend="property-mapper-resolving-typeconverters" />).</para>
      </listitem>

      <listitem>
        <para><code>setTypeConverterOption($typeConverterClassName,
        $optionKey, $optionValue</code>) can be used to set type converter
        specific options.</para>

        <para>Example: The <code>DateTimeConverter</code> supports a
        configuration option for the expected date format:</para>

        <programlisting>$propertyMappingConfiguration-&gt;setTypeConverterOption(
  'TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter',
  \TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter::CONFIGURATION_DATE_FORMAT,
  'Y-m-d'
);</programlisting>
      </listitem>

      <listitem>
        <para><code>setTypeConverterOptions($typeConverterClassName, array
        $options)</code> can be used to set multiple configuration options for
        the given TypeConverter. This overrides all previously set
        configuration options for the TypeConverter.</para>
      </listitem>
    </itemizedlist>

    <para>All the configuration options work <emphasis>only for the current
    level</emphasis>, i.e. all of the above converter options would only work
    for the toplevel type converter. However, it is also possible to specify
    configuration options for lower levels, using
    <code>forProperty($propertyPath)</code>. This is best shown with the
    example from the previous section, <xref
    linkend="ex-property-mapper-domain-object" />.</para>

    <para>The following configuration sets a mapping on the top level, and
    furthermore configures the <code>DateTime</code> converter for the
    <code>birthDate</code> property:</para>

    <programlisting>$propertyMappingConfiguration-&gt;setMapping('fullName', 'name');
$propertyMappingConfiguration
  -&gt;<emphasis>forProperty('birthDate')
  </emphasis>-&gt;setTypeConverterOption(
     'TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter',
     \TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter::CONFIGURATION_DATE_FORMAT,
     'Y-m-d'
  );</programlisting>

    <para><code>forProperty</code> also supports more than one nesting level
    using the <code>dot</code> notation, so writing something like
    <code>forProperty('mother.birthDate')</code> is possible.</para>

    <section xml:id="property-mapper-default-configuration">
      <title>Default Configuration - Security Considerations</title>

      <para>The property mapping process can be security-relevant, as a small
      example should show: Suppose there is a form where a person can create a
      new account, and assign a role to this account (from a pre-defined
      list). This role controls the access permissions the user has. The data
      which is sent to the server might look like this:</para>

      <programlisting>array(
  'username' =&gt; 'mynewuser',
  'role' =&gt; '5bc42c89-a418-457f-8095-062ace6d22fd'
);</programlisting>

      <para>Here, the <code>username</code> field contains the name of the
      user, and the <code>role</code> field points to the role the user has
      selected. Now, an attacker could modify the data, and submit the
      following:</para>

      <programlisting>array(
  'username' =&gt; 'mynewuser',
  'role' =&gt; array(
     'name' =&gt; 'superuser',
     'admin' =&gt; 1
  )
);</programlisting>

      <para>As the property mapper works recursively, it would
      <emphasis>create</emphasis> a new <code>Role</code> object with the
      <code>admin</code> flag set to <code>TRUE</code>, which might compromise
      the security in the system.</para>

      <para>That's why the <code>PersistentObjectConverter</code> has two
      options, <code>CONFIGURATION_MODIFICATION_ALLOWED</code> and
      <code>CONFIGURATION_CREATION_ALLOWED</code>, which must be used to
      explicitely activate the modification or creation of objects. By
      default, the <code>PersistentObjectConverter</code> does only fetch
      objects from the persistence, but does not create new ones or modifies
      existing ones.</para>

      <para>However, in the most-common use case, you want to use this magic
      functionality at least for the top-level object which is being
      submitted. That's why the default configuration (which is created by the
      <code>PropertyMappingConfigurationBuilder</code>)
      <emphasis>enables</emphasis> creation and modification for the
      <emphasis>top-level object</emphasis>, and <emphasis>disables</emphasis>
      it for all sub objects by default.</para>
    </section>
  </section>

  <section>
    <title>Reference of existing TypeConverters</title>

    <para>Here, all existing type converters are listed with their
    options.</para>

    <section>
      <title>ArrayCollectionConverter</title>

      <para>Transforms a list of array elements to a Doctrine
      ArrayCollection.</para>

      <itemizedlist>
        <listitem>
          <para>Source type: string, array</para>
        </listitem>

        <listitem>
          <para>Output type:
          Doctrine\Common\Collections\ArrayCollection</para>
        </listitem>

        <listitem>
          <para>Options: none</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>ArrayConverter</title>

      <para>Transforms arrays to arrays (no operation)</para>

      <itemizedlist>
        <listitem>
          <para>Source type: array</para>
        </listitem>

        <listitem>
          <para>Output type: array</para>
        </listitem>

        <listitem>
          <para>Options: none</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>BooleanConverter</title>

      <para>Transforms string and boolean to boolean.</para>

      <itemizedlist>
        <listitem>
          <para>Source type: string, boolean</para>
        </listitem>

        <listitem>
          <para>Output type: boolean </para>
        </listitem>

        <listitem>
          <para>Options: none</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>DateTimeConverter</title>

      <para>Transforms strings and arrays to DateTime</para>

      <itemizedlist>
        <listitem>
          <para>Source type: string, array</para>
        </listitem>

        <listitem>
          <para>Output type: DateTime</para>
        </listitem>

        <listitem>
          <para>Options</para>

          <itemizedlist>
            <listitem>
              <para><code>TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter::CONFIGURATION_DATE_FORMAT</code>:
              Date format to be used for conversion from string to DateTime,
              in a format understood by <code
              xlink:href="http://de3.php.net/manual/de/datetime.createfromformat.php">DateTime::createFromFormat</code>.
              If nothing specified, uses the <emphasis
              xlink:href="http://www.w3.org/TR/NOTE-datetime.html">W3C
              standard</emphasis> for date time.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <example>
        <title>Simple example, without any configuration</title>

        <programlisting>$inputData = '2005-08-15T15:52:01+00:00'; // in W3C format

// alternative:
$inputData = array(
  'date' =&gt; '2005-08-15T15:52:01+00:00'
);

$dateTime = $propertyMapper-&gt;convert($inputData, 'DateTime');</programlisting>
      </example>

      <example>
        <title>Custom date format specified in input array</title>

        <programlisting>$inputData = array(
  'date' =&gt; '15-08-2005',
  'format' =&gt; 'd-m-Y'
);

$dateTime = $propertyMapper-&gt;convert($inputData, 'DateTime');</programlisting>

        <para>Here, the format is specified in the input array itself.</para>
      </example>

      <example>
        <title>Custom date format specified via property mapping
        configuration</title>

        <programlisting>$inputData = '15-08-2005';

$propertyMappingConfiguration-&gt;setConfigurationOption(
   'TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter',
   \TYPO3\FLOW3\Property\TypeConverter\DateTimeConverter::CONFIGURATION_DATE_FORMAT,
   'd-m-Y'
);

$dateTime = $propertyMapper-&gt;convert($inputData, 'DateTime', $propertyMappingConfiguration);</programlisting>

        <para>Here, the format is specified via a property mapping
        configuration.</para>
      </example>

      <example>
        <title>Setting hour, minute, second and timezone separately</title>

        <programlisting>$inputData = array(
  'date' =&gt; '2005-08-15T15:52:01+00:00',
  'hour' =&gt; 10,
  'minute' =&gt; 05, // defaults to 0 if not specified
  'second' =&gt; 00,  // defaults to 0 if not specified
  'timezone' =&gt; 'Europe/Paris'
);

$dateTime = $propertyMapper-&gt;convert($inputData, 'DateTime');</programlisting>

        <para>Here, the time value of the date string is overridden to
        10:05:00, with the timezone set to Europe/Paris. Valid time zone
        identifiers are these understood by <code
        xlink:href="http://php.net/manual/en/timezones.php">DateTimeZone::construct()</code>.</para>
      </example>
    </section>

    <section>
      <title>FloatConverter</title>

      <para>Convert string to float, by simply casting it.</para>

      <itemizedlist>
        <listitem>
          <para>Source type: string</para>
        </listitem>

        <listitem>
          <para>Output type: float</para>
        </listitem>

        <listitem>
          <para>Options: none</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>IntegerConverter</title>

      <para>Convert a simple type to an integer, by casting it</para>

      <itemizedlist>
        <listitem>
          <para>Source type: integer, string</para>
        </listitem>

        <listitem>
          <para>Output type: integer</para>
        </listitem>

        <listitem>
          <para>Options: none</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>PersistentObjectConverter</title>

      <para>Convert arrays or UUID strings to their persistent objects.</para>

      <itemizedlist>
        <listitem>
          <para>Source type: array, string</para>
        </listitem>

        <listitem>
          <para>Output type: objects tagged @entity or @valueobject</para>
        </listitem>

        <listitem>
          <para>Options<itemizedlist>
              <listitem>
                <para><code>TYPO3\FLOW3\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_TARGET_TYPE</code></para>

                <para>Set target type for a specific sub-property, effectively
                overriding the class annotations.</para>
              </listitem>

              <listitem>
                <para><code>TYPO3\FLOW3\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_MODIFICATION_ALLOWED</code></para>

                <para>If <code>TRUE</code>, modification on persistent objects
                is performed if necessary.</para>
              </listitem>

              <listitem>
                <para><code>TYPO3\FLOW3\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_CREATION_ALLOWED</code></para>

                <para>If <code>TRUE</code>, creation of new objects is
                performed if necessary.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>
      </itemizedlist>

      <para>The PersistentObjectConverter has the following workflow:</para>

      <itemizedlist>
        <listitem>
          <para>If the input is <code>string</code>, it is assumed to be a
          UUID. Then, the object is fetched from persistence and
          returned.</para>
        </listitem>

        <listitem>
          <para>If the input is <code>array</code>, we check if it has an
          identity property.</para>
        </listitem>

        <listitem>
          <para>If the input has an identity property and NO additional
          properties, we fetch the object from persistence.</para>
        </listitem>

        <listitem>
          <para>If the input has an identity property AND additional
          properties, we fetch the object from persistence, create a clone on
          it, and set the sub-properties. We only do this if the configuration
          option <code>CONFIGURATION_MODIFICATION_ALLOWED</code> is
          <code>TRUE</code>.</para>
        </listitem>

        <listitem>
          <para>If the input has NO identity property, but additional
          properties, we create a new object and return it. However, we only
          do this if the configuration option
          <code>CONFIGURATION_CREATION_ALLOWED</code> is
          <code>TRUE</code>.</para>
        </listitem>
      </itemizedlist>

      <example>
        <title>Fetching an object from persistence</title>

        <programlisting>$inputData = '72a26566-103b-4f05-8381-b5503959fe01';

// alternative:
$inputData = array(
  '__identity' =&gt; '72a26566-103b-4f05-8381-b5503959fe01'
);
$myDomainObject = $propertyMapper-&gt;convert($inputData, 'My\Domain\Object\Here');</programlisting>

        <para>In this case, <code>$myDomainObject</code> has <emphasis>not
        been cloned</emphasis>, and all modifications on the domain object
        will be automatically stored in the persistence layer at the end of
        the request.</para>
      </example>

      <example>
        <title>Fetching an object from persistence, modifying it
        afterwards</title>

        <programlisting>$inputData = array(
  '__identity' =&gt; '72a26566-103b-4f05-8381-b5503959fe01',
  'name' =&gt; 'My Name'
);
$myDomainObject = $propertyMapper-&gt;convert($inputData, 'My\Domain\Object\Here');</programlisting>

        <para>In this case, <code>$myDomainObject</code> <emphasis>is
        cloned</emphasis>, thus gets disconnected from the persistence layer.
        Hence, all modifications on the domain object will
        <emphasis>not</emphasis> be automatically persisted at the end of the
        request. For converting <code>$name</code>, the
        <code>PropertyMapper</code> is invoked recursively.</para>
      </example>

      <example>
        <title>Fetching an object from persistence, modifying it
        afterwards</title>

        <programlisting>$inputData = array(
  '__identity' =&gt; '72a26566-103b-4f05-8381-b5503959fe01',
  'name' =&gt; 'My Name'
);
$myDomainObject = $propertyMapper-&gt;convert($inputData, 'My\Domain\Object\Here');</programlisting>

        <para>In this case, <code>$myDomainObject</code> <emphasis>is
        cloned</emphasis>, thus gets disconnected from the persistence layer.
        Hence, all modifications on the domain object will
        <emphasis>not</emphasis> be automatically persisted at the end of the
        request. For converting <code>$name</code>, the
        <code>PropertyMapper</code> is invoked recursively.</para>
      </example>

      <example>
        <title>Creating a new object, also overriding the type of one
        property</title>

        <programlisting>$inputData = array(
  'name' =&gt; 'My Name',
  'role' =&gt; 'ADMIN_ROLE'
);

$propertyMappingConfiguration-&gt;<emphasis>forProperty('role')-&gt;</emphasis>setConfigurationOption(
   'TYPO3\FLOW3\Property\TypeConverter\PersistentObjectConverter',
   \TYPO3\FLOW3\Property\TypeConverter\PersistentObjectConverter::CONFIGURATION_TARGET_TYPE,
   'My\Role\Object'
);

$myDomainObject = $propertyMapper-&gt;convert($inputData, 'My\Domain\Object\Here', $propertyMappingConfiguration);</programlisting>

        <para>Here, a new domain object is being created, as no identity
        property has been specified. Furthermore, the
        <code>TypeConverter</code> will return the type
        <code>My\Role\Object</code> when being asked for the type of
        <code>$role</code>. This can be used to override <code>@var</code>
        annotations in the domain model (i.e. when they are incorrect).</para>
      </example>
    </section>

    <section>
      <title>StringConverter</title>

      <para>Convert string to string.</para>

      <itemizedlist>
        <listitem>
          <para>Source type: string</para>
        </listitem>

        <listitem>
          <para>Output type: string</para>
        </listitem>

        <listitem>
          <para>Options: none</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>The inner workings of the Property Mapper</title>

    <para>The Property Mapper applies the following steps to convert a simple
    type to an object. Some of the steps will be described in detail
    afterwards.</para>

    <orderedlist>
      <listitem>
        <para>Figure out which type converter to use for the given source -
        target pair.</para>
      </listitem>

      <listitem>
        <para>Ask this type converter to return the <emphasis>child
        properties</emphasis> of the source data (if it has any), by calling
        <methodname>getSourceChildPropertiesToBeConverted()</methodname> on
        the type converter.</para>
      </listitem>

      <listitem>
        <para>For each child propery, do the following:</para>

        <orderedlist>
          <listitem>
            <para>Ask the type converter about the <emphasis>data
            type</emphasis> of the child property, by calling
            <methodname>getTypeOfChildProperty()</methodname> on the type
            converter.</para>
          </listitem>

          <listitem>
            <para>Recursively invoke the <code>PropertyMapper</code> to build
            the child object from the input data.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Now, call the type converter again (method
        <code>convertFrom</code>), passing all (already built) child objects
        along. The result of this call is returned as the final result of the
        property mapping process.</para>
      </listitem>
    </orderedlist>

    <para>On first sight, the steps might seem complex and difficult, but they
    account for a great deal of flexibility of the property mapper.</para>

    <section xml:id="property-mapper-resolving-typeconverters">
      <title>Automatic resolving of type converters</title>

      <para>All type converters which implement
      <interfacename>TYPO3\FLOW3\Property\TypeConverterInterface</interfacename>
      are automatically found in the resolving process. There are four API
      methods in each <code>TypeConverter</code> which influence the resolving
      process:</para>

      <itemizedlist>
        <listitem>
          <para><methodname>getSupportedSourceTypes()</methodname>: returns an
          array of simple types which are understood as source type by this
          type converter</para>
        </listitem>

        <listitem>
          <para><code>getSupportedTargetType()</code>: The target type this
          type converter can convert into. Can be either a simple type, or a
          class name.</para>
        </listitem>

        <listitem>
          <para><code>getPriority()</code>: If two type converters have the
          same source and target type, precedence is given to the one with
          higher priority. All standard TypeConverters have a priority lower
          than 100.</para>
        </listitem>

        <listitem>
          <para><code>canConvertFrom($source, $targetType</code>) is called as
          last check, when source and target types fit together. Here, the
          TypeConverter can implement runtime constraints to decide whether it
          can do the conversion.</para>
        </listitem>
      </itemizedlist>

      <para>When a type converter has to be found, the following algorithm is
      applied:</para>

      <orderedlist>
        <listitem>
          <para>If <code>typeConverter</code> is set in the
          <code>PropertyMappingConfiguration</code>, this is directly used.
          </para>
        </listitem>

        <listitem>
          <para>The inheritance hierarchy of the target type is traversed in
          reverse order (from most specific to generic) until a TypeConverter
          is found. If two type converters work on the same class, the one
          with highest priority is used.</para>
        </listitem>

        <listitem>
          <para>If no type converter could be found for the direct inheritance
          hierarchy, it is checked if there is a TypeConverter for one of the
          interfaces the target class implements. As it is not possible in PHP
          to order interfaces in any meaningful way, the TypeConverter with
          the highest priority is used (througout all interfaces).</para>
        </listitem>

        <listitem>
          <para>If no type converter is found in the interfaces, it is checked
          if there is an applicable type converter for the target type
          <code>object</code>.</para>
        </listitem>
      </orderedlist>

      <para>If a type converter is found according to the above algorithm,
      <methodname>canConvertFrom</methodname> is called on the type converter,
      so he can perform additional runtime checks. In case the TypeConverter
      returns <code>FALSE</code>, the search is continued at the position
      where it left off in the above algorithm.</para>

      <para>For simple target types, the steps 2 and 3 are omitted.</para>
    </section>
  </section>

  <section>
    <title>Writing own TypeConverters</title>

    <para>Often, it is enough to subclass
    <code>TYPO3\FLOW3\Property\TypeConverter\AbstractTypeConverter</code>
    instead of implementing <code>TypeConverterInterface</code>.</para>

    <para>Besides, good starting points for own type converters is the
    <code>DateTimeConverter</code> or the <code>IntegerConverter</code>. If
    you write your own type converter, you should set it to a priority greater
    than 100, to make sure it is used before the standard converters by
    FLOW3.</para>

    <para>TypeConverters should not contain any internal state, as they are
    re-used by the property mapper, even recursively during the same
    run.</para>

    <para>Of further importance is the <emphasis>exception and error
    semantics</emphasis>, so there are a few possibilities what can be
    returned in <code>convertFrom</code>:</para>

    <itemizedlist>
      <listitem>
        <para>For fatal errors which hint at some wrong configuration of the
        developer, throw an exception. This will show a stack trace in
        development context. Also for detected security breaches, exceptions
        should be thrown.</para>
      </listitem>

      <listitem>
        <para>If at run-time the type converter does not wish to participate
        in the results, <code>NULL</code> should be returned. For example, if
        a file upload is expected, but there was no file upload, returning
        <code>NULL</code> would be the appropriate way to handling
        this.</para>
      </listitem>

      <listitem>
        <para>If the error is recoverable, and the user should re-submit his
        data, return a <code>TYPO3\FLOW3\Error\Error</code> object (or a
        subclass thereof), containing information about the error. In this
        case, the property is not mapped at all (<code>NULL</code> is
        returned, like above).</para>

        <para>If the Property Mapping occurs in the context of the MVC stack
        (as it will be the case in most cases), the error is detected and a
        forward is done to the last shown form. The end-user experiences the
        same flow as when MVC validation errors happen.</para>

        <para>This is the correct response for example if the file upload
        could not be processed because of wrong checksums, or because the disk
        on the server is full.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
