#                                                                        #
# Configuration for the FLOW3 Framework                                  #
#                                                                        #
# This file contains the default base configuration for the FLOW3        #
# Framework. Don't modify this file but add configuration options to     #
# the FLOW3.yaml file in the in global Configuration/ directory instead. #
#                                                                        #

error:

  exceptionHandler:
  
    # Defines the global, last-resort exception handler.
    # The specified class must implement \F3\FLOW3\Error\ExceptionHandlerInterface
    className: F3\FLOW3\Error\DebugExceptionHandler

  errorHandler:
  
    # Defines the global, last-resort error handler.
    className: F3\FLOW3\Error\ErrorHandler

    # Defines which errors should result in an exception thrown - all other error
    # levels will be silently ignored.
    exceptionalErrors: [%E_ERROR%, %E_PARSE%, %E_CORE_ERROR%, %E_COMPILE_ERROR%, %E_USER_ERROR%, %E_RECOVERABLE_ERROR%]

utility:
  environment:
    
    # Defines the base directory which FLOW3 may use for storing different kinds
    # of temporary files.
    # The directory must be writable and FLOW3 will automatically create a sub
    # directory "FLOW3" which will contain the actual temporary files.
    temporaryDirectoryBase: %FLOW3_PATH_DATA%Temporary/

cache:
  defaultCache:
    
    # Defines the default cache backend (and its options) for FLOW3.
    #
    # It is suggested that all other sub packages and packages refer to this
    # configuration by default if they have no special requirements in terms
    # of the caching backend.
    backend: F3\FLOW3\Cache\Backend\File
    backendOptions: {}

  # The File Alteration Monitoring detects changes in class and resource files and 
  # automatically flushes the dependent caches (such as the reflection cache).
  # This mechanism comes with a speed penalty and should therefore be disabled in
  # production context.
  fileAlterationMonitoring:
    enable: n

object:
  configurationCache:
    
    # Enable or disable caching of the object configurations. If caching is
    # enabled, a cache backend must be properly configured.
    enable: y
    backend: F3\FLOW3\Cache\Backend\File
    backendOptions: {}
  
mvc:
  
  # Defines the available request handlers. Each of them must implement the
  # \F3\FLOW3\MVC\RequestHandlerInterface.
  availableRequestHandlers: [F3\FLOW3\MVC\Web\RequestHandler, F3\FLOW3\MVC\CLI\RequestHandler]

aop:
  
  # Enable or disable the whole AOP framework.
  #
  # Note that certain features depend on and might not work anymore if you
  # disable the AOP framework.
  enable: y
  
  # Settings for the caching of configuration an proxy classes which were built by
  # the AOP Framework.
  cache:
    enable: y
    backend: F3\FLOW3\Cache\Backend\File
    backendOptions: {}

reflection:
  
  # Settings for the caching of reflection information which is provided
  # by the reflection service.
  cache:
    enable: y
    backend: F3\FLOW3\Cache\Backend\File
    backendOptions: {}
    
    # If class changes detected by the Class Alteration Monitoring should also be detected
    # by the Reflection Service (only makes sense during development)
    detectClassAlterations: no

resource:
  
  # Settings for the resource caching mechanism
  cache:
    enable: y
    backend: F3\FLOW3\Cache\Backend\File
    backendOptions: {}

    # The path for the public resources mirror
    publicPath: Resources/
    
    # The strategy to use when caching files for public resources. Specify either
    # "none", "package" or "file"
    strategy: package

session:
  backend:
    
    # Defines the backend which is used for storing the session data.
    # If no session functionality is needed / wanted, just use the "Transient" session.
    className: F3\FLOW3\Session\PHP

persistence:
  
  # Whether to enable FLOW3's persistence manager or not.
  enable: n

security:

  enable: n

  firewall:
    
    # If set to yes, the firewall will reject any request that is not
    # explicitly allowed by a configured request filter.
    rejectAll: n
    
    # The filter configuration for the firewall. Here is an example configuration array:
    #
    # filters:
    # 	-	
    #     patternType:  URL
    #     patternValue: /some/url/.*
    #     interceptor:  AccessGrant
    # 	-
    #     patternType:  URL
    #     patternValue: /some/url/blocked.*
    #     interceptor:  AccessDeny
    #
    # If the objects are in the namespace "\F3\FLOW3\Security" it is enough to specify
    # the last name of the classname, e.g. AccessGrant
    filters: []

  authentication:

    # Array of authentication providers that should be used for authentication.
    # If you define a request pattern, the provider will only be called if the pattern
    # matches the current request. If the objects are in the namespace
    # "\F3\FLOW3\Security" it is sufficient to specify the last name of the classname,
    # e.g. UsernamePassword
    # Note: Authentication will be performed in the given order of the providers.
    # So make sure, that the primary authentication method is the first array entry.
    providers:
      -
        provider: UsernamePassword
        patternType:
        patternValue:

    # If set to TRUE, authentication will only succeed, if all active tokens (authentication mechanisms)
    # can be authenticated.
    authenticateAllTokens: FALSE

  # An array of access decision voters that should vote when access decisions are made
  accessDecisionVoters: [F3\FLOW3\Security\Authorization\Voter\ACL]

  # If this is set to TRUE access will be granted even if all voters abstain
  allowAccessIfAllVotersAbstain: FALSE

  policy:
    
    # The security policy resources configuration. Here is an example configuration array:
    #
    # resources:
    #   theOneAndOnlyResource:  "method(F3\TestPackage\BasicClass->setSomeProperty())"
    #   theOtherLonelyResource: "method(F3\TestPackage\BasicClassValidator->.*())"
    #   theIntegrativeResource: "theOneAndOnlyResource || theOtherLonelyResource"
    #
    resources: []
    
    # The security policy roles configuration. Here is an example configuration array:
    #
    # roles:
    #   ADMINISTRATOR: []
    #   DEVELOPER: []
    #   CUSTOMER:
    #     PRIVILEGED_CUSTOMER: [CUSTOMER]
    #
    roles: []
    
    # The security policy acls configuration connects the resources with the roles by assigning
    # privileges. Here is an example configuration array:
    #
    # acls:
    #   ADMINISTRATOR:
    #     deleteMethods:           ACCESS_GRANT
    #     MyPackageUpdateMethods:  ACCESS_DENY
    #
    #    CUSTOMER:
    #      deleteMethods:          ACCESS_DENY
    #      MyPackageUpdateMethods: ACCESS_DENY
    acls: []
    
    # Settings for caching the security policy ACLs.
    aclCache:
      backend: F3\FLOW3\Cache\Backend\File
      backendOptions: {}

  # This is a very dirty and not recommended playground option.
  #
  # As long as we don't have a proper mechanism for resolving authentication entry points,
  # this URI may point to some login page. The MVC Dispatcher is the only one who knows
  # about this option (and nobody else should use it because we'll discard it soon without
  # further notice).
  #
  # Currently used by the TYPO3 package for demo purposes.
  loginPageURIForDemoPurposes:

locale:
  
  # The default locale identifier.
  defaultLocaleIdentifier: en_Latn_EN
  
  # The default locale.
  #
  # This configuration option is automatically filled by FLOW3's locale
  # framework with a locale object considered to be the default locale
  # of the application.
  #
  # The locale object will usually reflect the setting made in
  # defaultLocaleIdentifier. However, depending on the application,
  # it might be overriden by the application's user settings or auto detection
  # mechanisms.
  #
  # It is recommended that all objects which are in need of some information
  # about the locale use the locale object stored in this setting.
  defaultLocale:
